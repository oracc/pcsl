<?xml version="1.0" encoding="UTF-8"?>
<esp:page xmlns:esp="http://oracc.org/ns/esp/1.0"
	  xmlns="http://www.w3.org/1999/xhtml"
	  xmlns:xh="http://www.w3.org/1999/xhtml"
	  xmlns:xi="http://www.w3.org/2001/XInclude">
  <esp:name>Sequences</esp:name>
  <esp:title>Sequence Database</esp:title>
  <html>
    <head/>
    <body>

      <p>This section describes three related things: how sequences
      should be encoded; how PCSL handles sequences; and one strategy
      for implementing sequences and their glyph variants using simple
      font features.</p>

      <esp:h>Sequences are not encoded</esp:h>

      <p>Following the Principles for Encoding Proto-Cuneiform, signs
      which are composed sequences of multiple adjacent signs should
      not be encoded.  The surface form of sequences can be variable
      in the ordering, selection, and disposition of components, all
      of which are are treated as glyph variations and not as discrete
      characters.</p>

      <p>In Proto-Cuneiform writing sequences are not
      necessarily linear: because the manuscripts are organized in
      cases (or boxes), signs are routinely juxtaposed in clusters in
      which the components can be written above, below, or near each
      other as well as being beside each other in a line.</p>

      <esp:sh>Opaque sequences are not encoded</esp:sh>

      <p>In standard transliteration practice for Proto-Cuneiform some
      signs are given simple names which do not reflect their status
      as a sequence, e.g., LUGAL is actually a sequence of LUâ‚‚ and
      GAL. We call these sequences "opaque sequences" and, like
      regular sequences, they are not encoded.</p>

      <esp:h>Sequences have constant character names</esp:h>

      <p>In PCSL, the tag <code>@sign</code> is used for sign names
      and is dissociated from glyph names.  All of the variants of a
      sequences are grouped under a single <code>@sign</code>.  The
      sign name is composed of a conventional ordering of the
      sequence, with each component joined by periods ('.'). Each sign
      name is unique among the set of sign names.</p>

      <esp:h>Glyphs have unique names</esp:h>

      <p>PCSL uses a new tag, <code>@glyf</code> to clarify the
      separation of character names versus glyph names.  Glyph names
      consist of a name conforming to an extended set of rules for
      grapheme naming and a variant tag, consisting of a tilde and a
      sequence of one or more digits.  One glyph name for LUGAL is
      <code>|LUâ‚‚.GAL|~1</code>.  The variant tag is stable and
      represents a variation on the basic glyph name (i.e., the name
      with all joiners mapped to '.').</p>

      <esp:sh>How unique glyph names are constructed</esp:sh>

      <p>Unique glyph names are constructed by varying the order and
      joiners of the grapheme notation in a way that reflects the
      variant's form. The joiners are '.' ("BESIDE"), '+' ("JOINING"),
      and 'âˆ˜' ("TURNING"), the ring operator. This last is an addition
      to ATF notation to support the description of sign clustering.</p>

      <p>Glyph names do not encode internal glyph variation, i.e.,
      several variant forms of IB are used in the construction of Å AB
      (|PA.IB|).</p>

      <p>Following the corpus-building rule that input text should not
      be reordered, glyph names do not reorder components.  Where
      there is a reasonable choice of how to describe the order of
      components an order identical or closer to the sequence
      character name is preferred.  Thus, in the case of character
      <code>|PAP~.IB~a|</code>, the glyph ð’­… could reasonably be
      described as |PAP~a.IB~a| or |IB~aâˆ˜PAP~a|.  The latter is
      preferred because it follows the character name.</p>

      <p>Similarly, glyph names do not remap or normalize variant
      components that are considered distinct signs in PCSL.  Thus,
      for character |UÅ ~a.KUR~a| there are glyphs |UÅ ~a.KUR~a| and
      |UÅ ~b.KUR~a|; for character |EN~a.EZEN~bÃ—Å E~a.NUN~a.SIGâ‚‡| there
      are glyphs and |EN~a.EZEN~bÃ—Å E~a@tâˆ˜NUN~a.SIGâ‚‡| and
      |EN~a.BAHARâ‚‚~bâˆ˜SIGâ‚‡.ME~a.NUN~a|.</p>

      <esp:sh>How glyph names are turned into ligatures</esp:sh>

      <p>Glyph names are turned into ligatures by taking the base
      component signs and joining them with the ZWJ, U+200D. Multiple
      glyph names may generate the same core ligature sequence, so
      CVnn tags are added to the second and subsequent duplicate core
      ligatures to disambituate them.  Thus, |Å E~a.NAMâ‚‚| has two glyph
      forms, named |Å E~a.NAMâ‚‚|~1 and |Å E~a.NAMâ‚‚|~2. These are mapped,
      schematically, to Å E~a_u200D_NAMâ‚‚ and Å E~a_u200D_NAMâ‚‚.cv01. The
      CVnn used in the font is relative to the number of previous
      duplicate siblings of the glyph name; in the case of the
      character |GA~a.ZATU753| there are glyphs |GA~a.ZATU753|~1 and
      |ZATU753.GA~a|~1; neither ligature requires a CVnn in this
      case.</p>

      <xi:include xml:base="." href="../db/seqdb.xml"/>

    </body>
  </html>
</esp:page>
