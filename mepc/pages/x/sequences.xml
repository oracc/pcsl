<?xml version="1.0" encoding="UTF-8"?>
<esp:page xmlns:esp="http://oracc.org/ns/esp/1.0" xmlns="http://www.w3.org/1999/xhtml" xmlns:xh="http://www.w3.org/1999/xhtml" xmlns:xpd="http://oracc.org/ns/xpd/1.0">
  <esp:name>Sequences</esp:name>
  <esp:title>Sequences</esp:title>
  <html>
    <head/>
    <body>

      <esp:h>Sequences</esp:h>
      
      <p>This section describes several related things: how sequences
      should be encoded; how PCSL handles sequences; exceptions to the
      principle that sequences should not be encoded; and one strategy
      for implementing sequences and their glyph variants using simple
      font features.</p>

      <esp:sh>Sequences are not encoded</esp:sh>

      <p>Following the Principles for Encoding Proto-Cuneiform, signs
      which are composed sequences of multiple adjacent signs should
      not be encoded.  The surface form of sequences can be variable
      in the ordering, selection, and disposition of components, all
      of which are are treated as glyph variations and not as discrete
      characters.</p>

      <p>In Proto-Cuneiform writing sequences are not
      necessarily linear: because the manuscripts are organized in
      cases (or boxes), signs are routinely juxtaposed in clusters in
      which the components can be written above, below, or near each
      other as well as being beside each other in a line.</p>

      <esp:sh>Opaque sequences are not encoded</esp:sh>

      <p>In standard transliteration practice for Proto-Cuneiform some
      signs are given simple names which do not reflect their status
      as a sequence, e.g., LUGAL is actually a sequence of LUâ‚‚ and
      GAL. We call these sequences "opaque sequences" and, like
      regular sequences, they are not encoded.</p>

      <esp:sh>Sequences have constant character names</esp:sh>

      <p>In PCSL, the tag <code>@sign</code> is used for sign names
      and is dissociated from glyph names.  All of the variants of a
      sequences are grouped under a single <code>@sign</code>.  The
      sign name is composed of a conventional ordering of the
      sequence, with each component joined by periods ('.'). Each sign
      name is unique among the set of sign names.</p>

      <p>If there is an attested simple linear sequence for a sequence
      character, that form is selected for the character name.  The
      mnemonically named <code>LUGAL</code> occurs in a simple linear
      sequence as |GAL~a.LUâ‚‚|, so that is used as the name of the
      character.</p>

      <esp:sh>Glyphs have unique names</esp:sh>

      <p>PCSL uses a new tag, <code>@glyf</code> to clarify the
      separation of character names versus glyph names.  Glyph names
      consist of a name conforming to an extended set of rules for
      grapheme naming and possibly a variant tag, consisting of a
      tilde and a sequence of one or more digits.  One glyph name for
      LUGAL is <code>|GAL~a.LUâ‚‚~a|~1</code>.  The variant tag is
      stable and represents a variation on the basic glyph name (i.e.,
      the name with all joiners mapped to '.').</p>

      <p>Glyph names only have to be unique among @glyf entries; a
      @sign and @glyf may have the same name.</p>

      <esp:sh>How unique glyph names are constructed</esp:sh>

      <p>Unique glyph names are constructed by varying the order and
      joiners of the grapheme notation in a way that reflects the
      variant's form. The joiners are '.' ("BESIDE"), '+' ("JOINING"),
      and 'âˆ˜' ("TURNING"), the ring operator. This last is an addition
      to ATF notation to support the description of sign clustering.</p>

      <p>Glyph names do not encode internal glyph variation, i.e.,
      several variant forms of IB are used in the construction of Å AB
      (|PA.IB|).</p>

      <p>Following the corpus-building rule that input text should not
      be reordered, glyph names do not reorder components.  Where
      there is a reasonable choice of how to describe the order of
      components an order identical or closer to the sequence
      character name is preferred.  Thus, in the case of character
      <code>|PAP~a.IB~a|</code>, the glyph ð’­… could reasonably be
      described as |PAP~a.IB~a| or |IB~aâˆ˜PAP~a|.  The former is
      preferred because it follows the character name.</p>

      <p>Similarly, glyph names do not remap or normalize variant
      components that are considered distinct signs in PCSL.  Thus,
      for character |UÅ ~a.KUR~a| there are glyphs |UÅ ~a.KUR~a| and
      |UÅ ~b.KUR~a|; similarly, for |EN~a.EZEN~bÃ—Å E~a.NUN~a.SIGâ‚‡| there
      are glyphs |EN~a.EZEN~bÃ—Å E~a@tâˆ˜NUN~a.SIGâ‚‡| and (with a distinct component)
      |EN~a.BAHARâ‚‚~bâˆ˜SIGâ‚‡.ME~a.NUN~a|.</p>

      <esp:sh>How glyph names are turned into ligatures</esp:sh>

      <p>Glyph names are turned into ligatures by taking the base
      component signs and joining them with the ZWJ, U+200D. Multiple
      glyph names may generate the same core ligature sequence, so
      CVnn tags are added to the second and subsequent duplicate core
      ligatures to disambiguate them.  Thus, |Å E~a.NAMâ‚‚| has two glyph
      forms, named |Å E~a.NAMâ‚‚|~1 and |Å E~a.NAMâ‚‚|~2. These are mapped,
      schematically, to Å E~a_u200D_NAMâ‚‚ and Å E~a_u200D_NAMâ‚‚.cv01. The
      CVnn used in the font is relative to the number of previous
      duplicate siblings of the glyph name; in the case of the
      character |GA~a.ZATU753| there are glyphs |GA~a.ZATU753|~1 and
      |ZATU753.GA~a|~1; neither ligature therefore requires a CVnn.</p>

      <p>Note that in order for this approach to work it is important
      to specify the OpenType feature lookups in the correct order:
      <code>liga</code> must come before <code>cv01 .. cvNN</code>,
      and <code>salt</code> should come last. Unmarked
      <code>liga</code> should be in the <code>liga</code> table;
      <code>liga.cvNN</code> should be in the <code>salt</code>
      table.</p>

      <p>In <code>XeTeX</code>, the features for the cvNN ligatures
      should be specified as "+cv01,+salt=0", "+cv02,+salt=1",
      "+cv03,+salt=2" (specifying +liga is unnecessary with XeTeX;
      note that salt index is 0-based).</p>
      
      <esp:sh>Exceptional Sequences</esp:sh>
      
      <p>In principle, sign list entries which are sequences of
      separate signs are not encoded in PC25. In practice, there are
      several reasons for making exceptions to this policy:</p>

      <dl>
	<dt>Reanalysis</dt>
	<dd>Proto-Cuneiform signs that are originally integral units
	may be reanalyzed into separate constituents. Where this is
	demonstrably the case, the original character is encoded and
	the reanalyzed sequence is considered a glyph variant.</dd>

	<!--
	<dt>Common Signs</dt>
	<dd>Some signs are allowed as exceptions because it would be
	counter-intuitive not to encode them as characters.</dd>
	-->
	
	<dt>Container Equivalency</dt>
	<dd>Some signs are allowed as exceptions because the
	juxtaposition of elements is the equivalent of a container
	(TIMES) relationship.</dd>
	
	<dt>Unencoded Constituents</dt>
	<dd>Some sequences contain constituents that are otherwise
	unattested; in this case the choice is either to encode a sign
	which may not be attested independently, or to encode the
	sequence.  In general the option adopted is to encode the
	sequence as a character.</dd>

	<dt>Analogy</dt>
	<dd>Some sequences are part of a group and would naturally be
	considered by users of the encoding to be analogous to each
	other. Where one or more members of a group fulfils either of
	the previous conditions for encoding as a character, PC25
	encodes the entire group as individual characters by analogy
	to avoid a possibly confusing mixture of encoded and unencoded
	group members.</dd>
	  
      </dl>

      <esp:sh>List of Exceptions</esp:sh>

      <esp:ssh>Reanalysis</esp:ssh>

      <p>Two city-name signs, ADAB and ARARMA~a, have earlier forms
      which are distinct from their reanalysis to include an initial
      Uâ‚„ component.  Other city names may also have earlier integral
      forms but without further evidence they are not proposed for
      encoding as characters at this point.</p>

      <!--
      <esp:sh>Common Signs</esp:sh>

      <p>The signs LUGAL (GAL+LU) and LI (Å E+Å A) are encoded as
      characters as common sign exceptions.</p>
      -->
      
      <esp:ssh>Container Equivalency</esp:ssh>

      <p>The signs ASAR and AZ are the equivalent of containers.</p>
      
      <esp:ssh>Unencoded Constituents</esp:ssh>

      <p>The following exception signs contain unencoded consituents:
      <!--ENKUM (EZENÃ—Å E),--> MEâ‚ƒ (EÅ DA-tenu), Å AGINA (modified UÅ  form with
      additional strokes, unclear with this is an UÅ  or not), ZUBI~a
      (NAâ‚‚-nutillu).</p>
      
      <esp:ssh>Analogy: BAPPIR Group</esp:ssh>

      <p>The group of signs with the base BAPPIR has one member which
      is a container (BAPPIR~e) and the entire group is encoded by
      analogy.</p>

      <!--
      <esp:sh>Analogy: Å ELU</esp:sh>

      <p>Most combinations of Å E plus another sign are encoded as
      characters (e.g., TU) so an exception is made for Å ELU.</p>
      -->
      
      <esp:ssh>Analogy: Sheep Group</esp:ssh>

      <p>The groups of signs with the base SILANITA, UDUNITA and UTUA
      represent various types (ages, genders) of sheep and since some
      of them have unencoded constituents the members of all groups
      are encoded as characters.</p>

      <esp:ssh>Analogy: UTUL Group</esp:ssh>

      <p>The UTUL group contains one member which includes an uncoded
      superposed reduplicated component (UTUL~c), so the entire group
      is encoded as characters.</p>
      
    </body>
  </html>
</esp:page>
